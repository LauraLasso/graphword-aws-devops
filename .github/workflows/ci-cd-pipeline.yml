name: 'Terraform CD Production'

on:
  push:
    branches:
      - develop
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: read

jobs:
  
  # cleanup-and-deploy:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: List Terraform files
  #       run: ls -la ./terraform

  #     - name: Configure AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} 
  #         aws-region: us-east-1

  #     - name: Verify AWS CLI
  #       run: aws --version

  #     - name: Verify AWS permissions
  #       run: aws sts get-caller-identity

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: "latest"

  #     - name: Terraform Init
  #       working-directory: ./terraform
  #       run: terraform init

  #     - name: Terraform Plan
  #       working-directory: ./terraform
  #       run: terraform plan -out=tfplan
        
  #     - name: Terraform Apply
  #       working-directory: ./terraform
  #       run: terraform apply -auto-approve tfplan

  #     - name: Verify jq installation
  #       run: jq --version
        
  #     - name: Install jq
  #       run: sudo apt-get update && sudo apt-get install -y jq

  #     - name: Export S3 bucket name from `terraform.tfstate`
  #       working-directory: ./terraform
  #       run: |
  #         BUCKET_NAME=$(jq -r '.outputs.datalake_bucket_name.value' terraform.tfstate)
  #         if [ -z "$BUCKET_NAME" ]; then
  #           echo "Error: S3 bucket name is null or empty"
  #           exit 1
  #         fi
  #         echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

  #     - name: Export API URL from `terraform.tfstate`
  #       working-directory: ./terraform
  #       run: |
  #         API_URL=$(jq -r '.outputs.api_graph_query_url.value' terraform.tfstate)
  #         if [ -z "$API_URL" ]; then
  #           echo "Error: API URL is null or empty"
  #           exit 1
  #         fi
  #         echo "API_URL=$API_URL" >> $GITHUB_ENV

  #     - name: Check S3 folders with retries
  #       run: |
  #         RETRIES=30
  #         WAIT_TIME=50
  #         FECHA_ACTUAL=$(date +%Y%m%d)
  #         CARPETAS=("1" "2" "3" "4" "5")
          
  #         for ((j=1; j<=$RETRIES; j++)); do
  #           COMPLETADAS=0
  #           for CARPETA in "${CARPETAS[@]}"; do
  #             if aws s3 ls s3://$BUCKET_NAME/$FECHA_ACTUAL/$CARPETA/ > /dev/null 2>&1; then
  #               echo "✔️ Folder $CARPETA found in $BUCKET_NAME/$FECHA_ACTUAL"
  #               COMPLETADAS=$((COMPLETADAS+1))
  #             else
  #               echo "❌ Folder $CARPETA not found in $BUCKET_NAME/$FECHA_ACTUAL, retry $j/$RETRIES"
  #             fi
  #           done
      
  #           if [ "$COMPLETADAS" -eq 5 ]; then
  #             echo "✅ All folders are present in $BUCKET_NAME/$FECHA_ACTUAL"
  #             exit 0
  #           fi
      
  #           echo "⏳ Waiting $WAIT_TIME seconds before next retry..."
  #           sleep $WAIT_TIME
  #         done
      
  #         echo "❌ Error: Not all folders were found after $RETRIES attempts."
  #         exit 1

  #     - name: Save Public IP to Variable
  #       run: echo "PUBLIC_IP=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_ENV
  #     - name: Use Public IP
  #       run: echo "The public IP is ${{ env.PUBLIC_IP }}"

  #     - name: Install dependencies
  #       working-directory: ./tests_runner
  #       run: |
  #         sudo apt-get update
  #         pip install -r requeriments.txt

  #     - name: Stop containers and free port
  #       run: |
  #         if docker ps -a --format '{{.Names}}' | grep -q "^prometheus$"; then
  #           docker stop prometheus
  #           docker rm prometheus
  #         else
  #           echo "The prometheus container does not exist."
  #         fi
      
  #         if docker ps -a --format '{{.Names}}' | grep -q "^grafana$"; then
  #           docker stop grafana
  #           docker rm grafana
  #         else
  #           echo "The grafana container does not exist."
  #         fi
      
  #         PID=$(lsof -i :9102 | awk '{print $2}' | tail -n 1)
  #         if [ -n "$PID" ]; then
  #           kill -9 $PID
  #         else
  #           echo "Port 9102 is not in use."
  #         fi

  #     - name: Run aws_api_tester.py script
  #       working-directory: ./tests_runner
  #       run: |
  #         echo "Executing aws_api_tester.py..."
  #         python aws_api_tester.py
  #       env:
  #         API_URL: ${{ env.API_URL }}

  #     - name: Terraform Destroy
  #       working-directory: ./terraform
  #       run: terraform destroy -auto-approve

  # create-release:
  #   runs-on: ubuntu-latest
  #   needs: cleanup-and-deploy

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Create a release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: "v${{ github.run_number }}"
  #         release_name: "Release v${{ github.run_number }}"
  #         body: "This is an automatically generated release after execution on master."
  #         draft: false
  #         prerelease: false
  # needs: create-release

  merge-to-develop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Switch to master branch
        run: |
          git fetch
          git checkout master

      - name: Configure Git identity
        run: |
          git config  user.email "laura.lassogar@gmail.com"
          git config  user.name "LauraLasso"

      - name: Resolve conflicts favoring develop
        run: |
          git merge origin/develop --allow-unrelated-histories || true
          git checkout --theirs .
          git add .
          git commit -m "Resolving conflicts favoring develop" || echo "No changes to commit"
          git push origin master --force

      - name: List Terraform files
        run: ls -la ./terraform

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  
          aws-region: us-east-1

      - name: Verify AWS CLI
        run: aws --version

      - name: Verify AWS permissions
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "latest"

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan